import { existsSync, mkdirSync } from "fs";

import { AlternateFontKey } from "./AlternateFontKey";
import { BumpKey } from "./BumpKey";
import { ExtraTallKey } from "./ExtraTallKey";
import { Key } from "./Key";
import { Level1Key } from "./Level1Key";
import { Level2Key } from "./Level2Key";
import { MiddleKey } from "./MiddleKey";
import { PlainSymbolKey } from "./PlainSymbolKey";
import { SideKey } from "./SideKey";
import { Spacebar } from "./Spacebar";

const letters = 'BCDEFGIJKLMNOPRSTUVWXY'.split('');
const numberSymbols = '*|=~+<>^&%'.split('');

const keys: Key[] = [
    ...['A', 'H'].map(letter => new BumpKey(new Level1Key(letter))),
    new SideKey(new Level1Key('Z')),
    new SideKey(new Level1Key('Q')),

    ...letters.map(letter => new Level1Key(letter)),

    ...numberSymbols.map((symbol, i) => new Level2Key(`${i}`, symbol)),
    new Level2Key('\'', '(', 'apostrophe'),
    new Level2Key('\\"', ')', 'quote'),
    new Level2Key(',', ';', 'comma'),
    new Level2Key('.', ':', 'period'),
    new Level2Key('-', '_', 'minus'),
    new Level2Key('?', '!', 'question'),
    new Level2Key('/', '\\', 'slash'),
    new Level2Key('`', '@', 'backtick'),
    new Level2Key('#', '$', 'hash'),
    new Spacebar(),
    new ExtraTallKey(new PlainSymbolKey("‚éà", 'helm_tall')),
    new ExtraTallKey(new PlainSymbolKey("‚Üµ", 'return')),
    new ExtraTallKey(new PlainSymbolKey("‚å´", 'backspace')),
    new SideKey(new PlainSymbolKey("‚áß", 'shift_left')),
    new SideKey(new PlainSymbolKey("‚áß", 'shift_right')),
    new SideKey(new PlainSymbolKey("‚Üπ", 'tab')),
    new SideKey(new PlainSymbolKey("‚á¨", 'capslock')),
    new SideKey(new Level2Key('[', '{', 'bracket_left')),
    new SideKey(new Level2Key(']', '}', 'bracket_right')),
    new AlternateFontKey(new PlainSymbolKey("‚éá", 'alt')),
    new MiddleKey(new AlternateFontKey(new Level1Key('‚éÑ', 'compose1'))),
    new MiddleKey(new Level1Key('‚áÆ', 'compose2')),
    new MiddleKey(new Level1Key('‚áû', 'pageup')),
    new MiddleKey(new Level1Key('‚áü', 'pagedown')),
    new Level1Key('ùëì‚ÇÅ', 'layer1'),
    new Level1Key('ùëì‚ÇÇ', 'layer2'),
    new Level1Key('ùëì‚ÇÉ', 'layer3'),
    new PlainSymbolKey('‚Üñ', 'home'),
    new PlainSymbolKey('‚Üò', 'end'),
    new PlainSymbolKey('‚Üë', 'up'),
    new PlainSymbolKey('‚Üì', 'down'),
    new PlainSymbolKey('‚Üí', 'right'),
    new PlainSymbolKey('‚Üê', 'left'),
    new PlainSymbolKey('‚áß', 'shift'),
    new PlainSymbolKey('‚áÆ', 'altgr'),
    new PlainSymbolKey('‚éã', 'escape'),
    new PlainSymbolKey('‚å¶', 'delete'),
    new PlainSymbolKey('‚éÄ', 'insert'),
    new PlainSymbolKey('‚éà', 'helm'),
    new PlainSymbolKey('‚åÉ', 'control'),
    new PlainSymbolKey('‚ùñ', 'super'),
    new PlainSymbolKey('‚åò', 'command'),
    new PlainSymbolKey('‚å•', 'option'),
];

if (!existsSync('./scad')) {
    mkdirSync('./scad');
}

for (const key of keys) {
    key.writeScadFile();
}